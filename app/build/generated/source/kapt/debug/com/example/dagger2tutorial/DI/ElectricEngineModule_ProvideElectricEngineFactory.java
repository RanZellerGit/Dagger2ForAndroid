// Generated by Dagger (https://google.github.io/dagger).
package com.example.dagger2tutorial.DI;

import com.example.dagger2tutorial.Models.ElectricEngine;
import com.example.dagger2tutorial.Models.Engine;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import javax.inject.Provider;

public final class ElectricEngineModule_ProvideElectricEngineFactory implements Factory<Engine> {
  private final ElectricEngineModule module;

  private final Provider<ElectricEngine> engineProvider;

  public ElectricEngineModule_ProvideElectricEngineFactory(
      ElectricEngineModule module, Provider<ElectricEngine> engineProvider) {
    this.module = module;
    this.engineProvider = engineProvider;
  }

  @Override
  public Engine get() {
    return provideElectricEngine(module, engineProvider.get());
  }

  public static ElectricEngineModule_ProvideElectricEngineFactory create(
      ElectricEngineModule module, Provider<ElectricEngine> engineProvider) {
    return new ElectricEngineModule_ProvideElectricEngineFactory(module, engineProvider);
  }

  public static Engine provideElectricEngine(ElectricEngineModule instance, ElectricEngine engine) {
    return Preconditions.checkNotNull(
        instance.provideElectricEngine(engine),
        "Cannot return null from a non-@Nullable @Provides method");
  }
}

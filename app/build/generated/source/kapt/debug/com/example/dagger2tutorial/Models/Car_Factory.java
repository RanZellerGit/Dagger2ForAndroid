// Generated by Dagger (https://google.github.io/dagger).
package com.example.dagger2tutorial.Models;

import dagger.internal.Factory;
import javax.inject.Provider;

public final class Car_Factory implements Factory<Car> {
  private final Provider<Driver> driverProvider;

  private final Provider<Engine> engineProvider;

  private final Provider<Wheels> wheelsProvider;

  public Car_Factory(
      Provider<Driver> driverProvider,
      Provider<Engine> engineProvider,
      Provider<Wheels> wheelsProvider) {
    this.driverProvider = driverProvider;
    this.engineProvider = engineProvider;
    this.wheelsProvider = wheelsProvider;
  }

  @Override
  public Car get() {
    return new Car(driverProvider.get(), engineProvider.get(), wheelsProvider.get());
  }

  public static Car_Factory create(
      Provider<Driver> driverProvider,
      Provider<Engine> engineProvider,
      Provider<Wheels> wheelsProvider) {
    return new Car_Factory(driverProvider, engineProvider, wheelsProvider);
  }

  public static Car newInstance(Driver driver, Engine engine, Wheels wheels) {
    return new Car(driver, engine, wheels);
  }
}
